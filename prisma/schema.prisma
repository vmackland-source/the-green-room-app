
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(cuid())
  fullName           String
  email              String?
  phone              String?
  address            String?
  preferredContact   String?
  cannabisPreference String?  // 'indica' | 'sativa' | 'hybrid'
  allergies          String?
  heardAbout         String?
  whyJoin            String?
  photoUrl           String?
  membershipStatus   String   @default("pending") // 'pending' | 'active' | 'inactive'
  membershipExpiresAt DateTime?
  createdAt          DateTime @default(now())
  reservations       Reservation[]
  orders             Order[]
  payments           Payment[]
}

model Reservation {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  dateTime     DateTime
  partySize    Int
  includesGuest Boolean  @default(false)
  totalAmount  Int      // in cents
  status       String   @default("pending") // 'pending' | 'paid' | 'cancelled'
  createdAt    DateTime @default(now())
}

model Order {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  itemsJson   String   // JSON array of items
  totalAmount Int      // in cents
  infused     Boolean  @default(false) // indicates if any item has infusion; dessert is always infused by default
  status      String   @default("pending") // 'pending' | 'paid' | 'cancelled'
  createdAt   DateTime @default(now())
}

model Payment {
  id             String   @id @default(cuid())
  userId         String?
  user           User?    @relation(fields: [userId], references: [id])
  purpose        String   // 'membership' | 'reservation' | 'order'
  relatedId      String?  // reservationId or orderId
  amount         Int      // in cents
  status         String   @default("created") // 'created' | 'paid' | 'failed'
  stripeSession  String?
  createdAt      DateTime @default(now())
}
